import Head from "next/head";
import Image from "next/image";
import { Inter } from "@next/font/google";
import styles from "@/styles/Home.module.css";
import Pokemon from "@/Components/Pokemon";
import PokemonDescription from "@/Components/PokemonDescription";
import { useRef,useState } from "react";
import pokemon from "./[pokemonId]";
import Carousel from 'react-multi-carousel';
import 'react-multi-carousel/lib/styles.css';

const inter = Inter({ subsets: ["latin"] });

export default function Home({data}) {

// for responsive carousel 

  const responsive = {
        superLargeDesktop: {
          breakpoint: { max: 4000, min: 3000 },
          items: 5
        },
        desktop: {
          breakpoint: { max: 3000, min: 1024 },
          items: 3
        },
        tablet: {
          breakpoint: { max: 300, min: 250 },
          items: 2
        },
        mobile: {
          breakpoint: { max: 250, min: 200 },
          items: 1
        }
      };
  return (
    <>
      <Head>
        <title>Pokemon App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="bg-white">
        <div className={`w-full py-6 min-h-screen ${styles.pokemonContainer}`}>
          <div className="logo flex justify-center  py-10">
            <Image
              src={"/MediaAsset/Logo.png"}
              width={200}
              height={100}
              alt="pokemon-logo"
            />
          </div>
          <div className="container relative flex flex-col items-center">
            {/* for small device  */}
            <div  className="block md:block lg:hidden ">
              <Carousel className="block lg:hidden " 
              draggable={true}
              keyBoardControl={true}
              itemClass={styles.carouselItem}
              responsive={responsive}>
                {
                  data && data.map( (pokemon, index) => <Pokemon key={index} index={index} pokemon={pokemon} />)
                }
              </Carousel>
            </div>
          <div className={`hidden md:grid lg:grid lg:grid-cols-5 lg:gap-10  max-w-7xl my-0 ${styles.pokemons}`}>
                {
                  data && data.map( (pokemon, index) => <Pokemon key={index} index={index} pokemon={pokemon} />)
                }
            </div>
          </div>
        </div>
        <PokemonDescription />
      </main>
    </>
  );
}

// query graphql 
const gqlQuery = `query pokemons($limit: Int, $offset: Int) {
  pokemons(limit: $limit, offset: $offset) {
    count
    next
    previous
    status
    message
    results {
      url
      name
      image
    }
  }
}`;
// graphql variables 
const gqlVariables = {
  limit: 10,
  offset: 1,
};

export const getStaticProps = async () => {
  const res = await fetch("https://graphql-pokeapi.graphcdn.app/", {
    credentials: "omit",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      query: gqlQuery,
      variables: gqlVariables,
    }),
    method: "POST",
  });
  const data = await res.json();

  return{
    props:{
      data: data?.data?.pokemons?.results
    }
  }
}